<button
  id="theme-toggle"
  aria-label="Toggle Theme"
  class="flex h-8 w-8 items-center justify-center rounded-sm border border-black/15 bg-neutral-100 p-1.5 text-xs transition-colors duration-300 ease-in-out hover:bg-black/5 hover:text-black focus-visible:bg-black/5 focus-visible:text-black dark:border-white/20 dark:bg-neutral-900 dark:hover:bg-white/5 dark:hover:text-white dark:focus-visible:bg-white/5 dark:focus-visible:text-white"
>
  <svg
    id="sun-icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    class="hidden h-6 w-6 md:h-5 md:w-5 dark:block"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <circle cx="12" cy="12" r="5"></circle>
    <line x1="12" y1="1" x2="12" y2="3"></line>
    <line x1="12" y1="21" x2="12" y2="23"></line>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
    <line x1="1" y1="12" x2="3" y2="12"></line>
    <line x1="21" y1="12" x2="23" y2="12"></line>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
  </svg>
  <svg
    id="moon-icon"
    xmlns="http://www.w3.org/2000/svg"
    width="24"
    height="24"
    viewBox="0 0 24 24"
    class="block h-6 w-6 md:h-5 md:w-5 dark:hidden"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
  </svg>
</button>

<script>
  // Use a single RAF call to batch DOM updates
  let rafId = null;
  
  // Immediately invoked function to ensure proper scoping
  (function() {
    // Check if we're in a browser environment
    if (typeof document === 'undefined') return;

    // Get all theme toggle buttons once
    const themeToggles = document.querySelectorAll("#theme-toggle");
    if (!themeToggles.length) return;

    // Debounce function to prevent rapid theme toggles
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // Function to get the current theme
    const getTheme = (): "dark" | "light" => {
      try {
        // Check for saved theme preference first
        if (typeof localStorage !== 'undefined' && localStorage.theme) {
          return localStorage.theme;
        }
        // Fall back to system preference
        return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
      } catch (e) {
        return "light"; // Default to light if there's an error
      }
    };

    // Batch DOM updates using requestAnimationFrame
    const batchThemeUpdates = (theme) => {
      if (rafId) cancelAnimationFrame(rafId);
      
      rafId = requestAnimationFrame(() => {
        try {
          // Batch DOM updates
          const updates = [];
          
          // Update theme class
          updates.push(() => {
            if (theme === 'dark') {
              document.documentElement.classList.add('dark');
              document.documentElement.style.colorScheme = 'dark';
            } else {
              document.documentElement.classList.remove('dark');
              document.documentElement.style.colorScheme = 'light';
            }
            document.documentElement.setAttribute('data-theme', theme);
          });
          
          // Execute all updates in a single frame
          updates.forEach(update => update());
          
          // Save to localStorage (don't block rendering)
          requestIdleCallback(() => {
            try {
              localStorage.setItem('theme', theme);
            } catch (e) {
              console.warn('Could not save theme preference:', e);
            }
          });
          
        } catch (e) {
          console.error('Error applying theme:', e);
        } finally {
          rafId = null;
        }
      });
    };

    // Toggle between light and dark theme
    const toggleTheme = debounce(() => {
      const currentTheme = getTheme();
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      batchThemeUpdates(newTheme);
    }, 100); // 100ms debounce time

    // Initialize theme on page load
    const initTheme = () => {
      const currentTheme = getTheme();
      batchThemeUpdates(currentTheme);
    };
    
    // Handle Astro view transitions
    const handlePageTransition = () => {
      const theme = getTheme();
      batchThemeUpdates(theme);
    };

    // Watch for system theme changes (only if no explicit preference is set)
    const setupSystemThemeListener = () => {
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      const handleSystemThemeChange = (e) => {
        if (!localStorage.theme) {
          batchThemeUpdates(e.matches ? 'dark' : 'light');
        }
      };
      
      if (mediaQuery.addEventListener) {
        mediaQuery.addEventListener('change', handleSystemThemeChange);
      } else if (mediaQuery.addListener) {
        mediaQuery.addListener(handleSystemThemeChange);
      }
      
      return () => {
        if (mediaQuery.removeEventListener) {
          mediaQuery.removeEventListener('change', handleSystemThemeChange);
        } else if (mediaQuery.removeListener) {
          mediaQuery.removeListener(handleSystemThemeChange);
        }
      };
    };

    // Initialize everything
    const init = () => {
      initTheme();
      const cleanupSystemTheme = setupSystemThemeListener();
      
      // Add click event listeners to all theme toggle buttons
      themeToggles.forEach((toggle) => {
        toggle.addEventListener('click', (e) => {
          e.preventDefault();
          toggleTheme();
        });
      });
      
      // Handle Astro view transitions
      document.addEventListener('astro:after-swap', handlePageTransition);
      
      // Cleanup function
      return () => {
        cleanupSystemTheme();
        document.removeEventListener('astro:after-swap', handlePageTransition);
        if (rafId) {
          cancelAnimationFrame(rafId);
          rafId = null;
        }
      };
    };
    
    // Start initialization
    const cleanup = init();
    
    // Cleanup on component unmount
    return () => {
      if (cleanup) cleanup();
    };
  })();
</script>
